# inline comments
# another inline comment

# inline comment after empty line

  # inline comment after white-space

12 # EOL comment

/* multi-line
 * comment
 */

0

47

null

true

false

ab = q

42 == 24

12 + 3 / 2 * 1

"this is a string"

"interpolated ${x}"

reference

_12 = "twelve"

__blah = _12

variableX = _12

variable-y = variableX # note that the '-' character may be part of the variable name

__variable__z_ = variable-y

"Escaped chars ${x} \n \r \t \${q}"

# Examples from https://nixos.org/nix/manual/#idm140737318143152

"--with-freetype2-library=${freetype}/lib"

"--with-freetype2-library=" + freetype + "/lib"

configureFlags = "
  -system-zlib -system-libpng -system-libjpeg
  ${if openglSupport then "-dlopen-opengl
    -L${mesa}/lib -I${mesa}/include
    -L${libXmu}/lib -I${libXmu}/include" else ""}
  ${if threadSupport then "-thread" else "-no-thread"}
";

# indented string
indented = ''
  This is the first line.
  This is the second line.
    This is the third line.
'';

stdenv.mkDerivation {
  postInstall =
    ''
      mkdir $out/bin $out/etc
      cp foo $out/bin
      echo "Hello World" > $out/etc/foo.conf
      ${if enableBar then "cp bar $out/bin" else ""}
    '';
}

// https://nixos.org/nix/manual/#sec-language-operators
e . attrpath or def

e1 e2

e ? attrpath

e1 ++ e2

e1 + e2

! e

e1 // e2

e1 == e2

e1 != e2

e1 && e2

e1 || e2

e1 -> e2

with e1; e2

let as = { x = "foo"; y = "bar"; };
in with as; x + y

with (import ./definitions.nix); ...

{ stdenv, fetchurl, perl }: # 1

stdenv.mkDerivation { # 2
  name = "hello-2.1.1"; # 1: String
  # 2: Multiline string
  configureFlags  = "
  ";
  meta = {
    # 3: Indented string
    description = ''
    A contrived example of a Nix expression, suitable for testing the lexer for
    Rouge.
    '';
  };
  builder = ./builder.sh; # 4
  src = fetchurl { 5
    url = ftp://ftp.nluug.nl/pub/gnu/hello/hello-2.1.1.tar.gz;
    md5 = "70c9ccf9fac07f762c24f2df2290784d";
  };
  inherit perl; # 6
}
